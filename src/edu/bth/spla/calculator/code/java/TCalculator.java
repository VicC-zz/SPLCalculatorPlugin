package edu.bth.spla.calculator.code.java;

import edu.bth.spla.calculator.model.*;

public class TCalculator
{
  protected static String nl;
  public static synchronized TCalculator create(String lineSeparator)
  {
    nl = lineSeparator;
    TCalculator result = new TCalculator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "package com.spl.gui;" + NL + "" + NL + "import java.awt.Dimension;" + NL + "import java.awt.GridLayout;" + NL + "import java.awt.KeyEventDispatcher;" + NL + "import java.awt.KeyboardFocusManager;" + NL + "import java.awt.Toolkit;" + NL + "import java.awt.event.ActionEvent;" + NL + "import java.awt.event.ActionListener;" + NL + "import java.awt.event.KeyEvent;" + NL + "import java.util.ArrayList;" + NL + "" + NL + "import javax.swing.JButton;" + NL + "import javax.swing.JFrame;" + NL + "import javax.swing.JTextField;" + NL + "import javax.swing.UIManager;" + NL + "import javax.swing.UnsupportedLookAndFeelException;" + NL + "import javax.swing.plaf.ColorUIResource;" + NL + "" + NL + "import com.spl.input.InputManager;" + NL + "import com.spl.model.IModel;" + NL + "import com.spl.model.Model;" + NL + "import com.spl.model.ModelObserver;" + NL + "import com.spl.properties.ConfigReader;" + NL + "" + NL + "public class Calculator implements ModelObserver {" + NL + "\t" + NL + "\tprivate class MyDispatcher implements KeyEventDispatcher { " + NL + "\t    @Override " + NL + "\t    public boolean dispatchKeyEvent(KeyEvent e) { " + NL + "\t    \treturn false;" + NL + "\t    } " + NL + "\t} " + NL + "\t\t" + NL + "\tprivate final boolean FLAG_CHILDREN = false;" + NL + "\t" + NL + "\tprivate final int gridNumbersX = 3;" + NL + "\tprivate final int gridNumbersY = 4;" + NL + "\tprivate final int gridOperatorsX = 3;" + NL + "\tprivate final int gridOperatorsY = 0;" + NL + "\t" + NL + "\tprivate final String THEME_PROPERTIES_FILE = \"theme\";" + NL + "\tprivate final String TRANSPARENT_BG = \"pixel_trans.png\";" + NL + "\t" + NL + "\tprivate static final String UNDO_BUTTON = \"UNDO\";" + NL + "\tprivate static final String CLEAR_BUTTON = \"CLEAR\";" + NL + "\tprivate static final String EQUAL_BUTTON = \"=\";" + NL + "\tprivate static final char DEL_CHAR = '\\b';" + NL + "\tprivate static final char ENTER_CHAR = '\\n';" + NL + "\tprivate static final char EQUAL_CHAR = '=';" + NL + "\t" + NL + "\tprivate ImagePanel pane, jplNumbers, jplOperators;" + NL + "\tprivate JTextField jtfOutput1, jtfOutput2;" + NL + "\t\t" + NL + "\tprivate IModel model;" + NL + "\tprivate InputManager inputMgr;" + NL + "\t" + NL + "\tprivate JFrame frame;" + NL + "\tprivate Theme theme;" + NL + "" + NL + "\tpublic Calculator() {" + NL + "\t\t// 1. Subscribes to the model (model-observer pattern)" + NL + "\t\tmodel = Model.getInstance();" + NL + "\t\tmodel.subscribe(this);" + NL + "\t\t" + NL + "\t\t// 2. Connects with the input manager" + NL + "\t\tinputMgr = new InputManager();" + NL + "\t\tinputMgr.load_valid_operators();" + NL + "\t\t" + NL + "\t\t// 3. Loads the theme configuration" + NL + "\t\tloadThemeConfiguration();" + NL + "\t\t" + NL + "\t\t// 4. Creates and sets up the window" + NL + "        frame = new JFrame(\"SPL Calculator\");" + NL + "        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);" + NL + "        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();" + NL + "        frame.setLocation(screenSize.width/4, screenSize.height/4);" + NL + "        frame.setResizable(false);" + NL + "\t\t" + NL + "\t\t// 5. Sets up the content pane" + NL + "        addComponents();" + NL + "\t\t" + NL + "\t\t// 6. Displays the window" + NL + "        frame.setVisible(true);" + NL + "\t}" + NL + "\t" + NL + "\tpublic void loadThemeConfiguration() {" + NL + "\t\tConfigReader configReader = new ConfigReader(THEME_PROPERTIES_FILE);" + NL + "\t\tString inputMethod = configReader.getProperty(\"input_method\");" + NL + "\t\tString outputMode = configReader.getProperty(\"output_mode\");" + NL + "\t\tString bgImage = configReader.getProperty(\"bg_image\");" + NL + "\t\tString bgColor = configReader.getProperty(\"bg_color\");" + NL + "\t\tString fgBut = configReader.getProperty(\"fg_button\");" + NL + "\t\tString bgDis = configReader.getProperty(\"bg_display\");" + NL + "\t\tString fgDis = configReader.getProperty(\"fg_display\");" + NL + "\t\t" + NL + "\t\t" + NL + "\t\ttheme = new Theme(inputMethod, outputMode, bgImage," + NL + "\t\t\t\tbgColor, fgBut, bgDis, fgDis);" + NL + "\t}" + NL + "\t" + NL + "\tpublic void addComponents() {\t\t" + NL + "\t\t// 1. Sets the theme of the calculator" + NL + "\t\tsetTheme();" + NL + "\t\t" + NL + "\t\t// 2. Creates the variable content of the pads" + NL + "\t\taddOutputPad();" + NL + "\t\taddNumericPad();" + NL + "\t\taddOperatorsPad();" + NL + "\t\t" + NL + "\t\t// 3. Place components attending to their bounds" + NL + "\t\t";
  protected final String TEXT_2 = NL + "\t\t\tframe.setSize(410, 475);" + NL + "\t\t\tpane = new ImagePanel(theme.getBgImage());" + NL + "\t\t\tjtfOutput1.setBounds(50,95,305,25);" + NL + "\t\t\tjplNumbers.setBounds(50,150,150,150);" + NL + "\t\t\tjplOperators.setBounds(205,150,150,175);" + NL + "\t\t\t";
  protected final String TEXT_3 = NL + "\t\t\tframe.setSize(315,300);" + NL + "\t\t\tpane = new ImagePanel(null);" + NL + "\t\t\tjtfOutput1.setBounds(5,5,305,25);" + NL + "\t\t\tif (theme.getOutputMode().equals(theme.OM_TEXT_2ROWS)) {" + NL + "\t\t\t\tjtfOutput2.setBounds(5,35,305,25);" + NL + "\t\t\t\tpane.add(jtfOutput2);" + NL + "\t\t\t}" + NL + "\t\t\tjplNumbers.setBounds(5,70,150,150);" + NL + "\t\t\tjplOperators.setBounds(160,70,150,175);" + NL + "\t\t\t";
  protected final String TEXT_4 = NL + "\t\tpane.add(jtfOutput1);" + NL + "\t\tpane.add(jplNumbers);" + NL + "\t\tpane.add(jplOperators);" + NL + "\t\tpane.setLayout(null);" + NL + "" + NL + "\t\t// 4. Adds the structure to the main frame" + NL + "\t\tframe.add(pane);" + NL + "\t}" + NL + "" + NL + "\tprivate void setTheme() {" + NL + "\t\t// VARIABILITIES" + NL + "\t\t// 1.- BG COLOR" + NL + "\t\tUIManager.put(\"Panel.background\",new ColorUIResource(Integer.parseInt(theme.getBgColor(), 16)));" + NL + "\t\t// 2.- BUTTON FOREGROUND" + NL + "\t\tUIManager.put(\"Button.foreground\",new ColorUIResource(Integer.parseInt(theme.getFgButton(), 16)));" + NL + "\t\t// 3.- DISPLAY BACKGROUND" + NL + "\t\tUIManager.put(\"TextField.background\",new ColorUIResource(Integer.parseInt(theme.getBgDisplay(), 16)));" + NL + "\t\t// 4.- DISPLAY FOREGROUND" + NL + "\t\tUIManager.put(\"TextField.foreground\",new ColorUIResource(Integer.parseInt(theme.getFgDisplay(), 16)));" + NL + "\t}" + NL + "\t" + NL + "\tprivate void addOutputPad() {\t\t" + NL + "\t\t// 1.- COMMONALITY: output display -> 1 row" + NL + "\t\tjtfOutput1 = new JTextField(\"0\");" + NL + "\t\tjtfOutput1.setHorizontalAlignment(JTextField.RIGHT);" + NL + "\t\tjtfOutput1.setEditable(false);" + NL + "\t\t" + NL + "\t    // 2.- VARIABILITY POINT: output display -> 2 rows" + NL + "\t\t";
  protected final String TEXT_5 = NL + "\t\t\tjtfOutput2 = new JTextField();" + NL + "\t\t\tjtfOutput2.setHorizontalAlignment(JTextField.RIGHT);" + NL + "\t\t\tjtfOutput2.setEditable(false);" + NL + "\t\t";
  protected final String TEXT_6 = NL + "\t\t";
  protected final String TEXT_7 = NL + "\t\t// 3.- Sets the key listener of the calculator" + NL + "\t\tKeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager(); " + NL + "\t    manager.addKeyEventDispatcher(new MyDispatcher() {" + NL + "\t\t    public boolean dispatchKeyEvent(KeyEvent e) { " + NL + "\t\t    \tif (e.getID() == KeyEvent.KEY_PRESSED) { " + NL + "\t\t\t    \tchar keyCode = e.getKeyChar();" + NL + "\t\t\t\t\tkeyStroke(keyCode); " + NL + "\t\t        }" + NL + "\t\t    \t" + NL + "\t\t        return false; " + NL + "\t\t    }" + NL + "\t    }); " + NL + "\t    ";
  protected final String TEXT_8 = "\t\t" + NL + "\t}" + NL + "" + NL + "\tprivate void addNumericPad() {" + NL + "\t\tjplNumbers = new ImagePanel(TRANSPARENT_BG);" + NL + "\t\tjplNumbers.setLayout(new GridLayout(gridNumbersY,gridNumbersX));" + NL + "\t\tArrayList<String> arrayOfButtonTags = new ArrayList<String>(); " + NL + "\t\t" + NL + "\t\t// 1.- Fills the array of button tags\t\t\t\t" + NL + "\t\t// 1.1.- COMMONALIY: Fixed numbers" + NL + "\t\tfor (int i = 9; i >= 0; i --) {" + NL + "\t\t\tarrayOfButtonTags.add(String.valueOf(i));" + NL + "\t\t}" + NL + "\t\t// 1.2.- VARIABILITY POINT, punctuation: Extra symbols (if any, ie '.')" + NL + "\t\tfor (int i = 0; i < inputMgr.symbols.length; i++) {" + NL + "\t\t\tif (inputMgr.symbols[i] == '.') {" + NL + "\t\t\t\tarrayOfButtonTags.add(\".\");" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t// 2.- Creates the buttons and links them to the buttonPressed generic" + NL + "\t\t//\t\tactionPerformed method" + NL + "\t\tfor (final String s : arrayOfButtonTags) {" + NL + "\t\t\tJButton jbtButton = new JButton(s);" + NL + "\t\t\tjbtButton.addActionListener(" + NL + "\t\t\t\t\tnew ActionListener() {" + NL + "\t\t\t\t\t\tpublic void actionPerformed(ActionEvent e) {" + NL + "\t\t\t\t            buttonPressed(s);" + NL + "\t\t\t\t        }" + NL + "\t\t\t\t    }" + NL + "\t\t\t);" + NL + "\t\t\tjplNumbers.add(jbtButton);" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\tprivate void addOperatorsPad() {" + NL + "\t\tjplOperators = new ImagePanel(TRANSPARENT_BG);" + NL + "\t\tjplOperators.setLayout(new GridLayout(gridOperatorsY, gridOperatorsX));" + NL + "\t\tArrayList<String> arrayOfButtonTags = new ArrayList<String>(); " + NL + "\t\t" + NL + "\t\t// 1.- Fills the array of button tags\t\t\t\t" + NL + "\t\t// 1.1.- COMMONALIY: buttons UNDO, CLEAR and =" + NL + "\t\tarrayOfButtonTags.add(UNDO_BUTTON);" + NL + "\t\tarrayOfButtonTags.add(CLEAR_BUTTON);" + NL + "\t\tarrayOfButtonTags.add(EQUAL_BUTTON);" + NL + "\t\t\t" + NL + "\t\t// 1.2.- VARIABILITY POINT: operators supported by the calculator" + NL + "\t\tfor (int i = 0; i < inputMgr.symbols.length; i++) {" + NL + "\t\t\tchar symbol = inputMgr.symbols[i];" + NL + "\t\t\tif ((!Character.isDigit(symbol)) && (symbol != '.')) {" + NL + "\t\t\t\tarrayOfButtonTags.add(Character.toString(inputMgr.symbols[i]));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t// 2.- Creates the buttons and links them to the buttonPressed generic" + NL + "\t\t//\t\tactionPerformed method" + NL + "\t\tfor (final String s : arrayOfButtonTags) {" + NL + "\t\t\tJButton jbtButton = new JButton(s);" + NL + "\t\t\tjbtButton.addActionListener(" + NL + "\t\t\t\t\tnew ActionListener() {" + NL + "\t\t\t\t\t\tpublic void actionPerformed(ActionEvent e) {" + NL + "\t\t\t\t            buttonPressed(s);" + NL + "\t\t\t\t        }" + NL + "\t\t\t\t    }" + NL + "\t\t\t);" + NL + "\t\t\tjplOperators.add(jbtButton);" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\tprivate void buttonPressed(String buttonLabel) {" + NL + "\t\tchar c;" + NL + "\t\t\t\t" + NL + "\t\tif (buttonLabel.equals(UNDO_BUTTON)) {" + NL + "\t\t\tinputMgr.clear();" + NL + "\t\t}" + NL + "\t\telse if (buttonLabel.equals(CLEAR_BUTTON) ){" + NL + "\t\t\tinputMgr.clearall();" + NL + "\t\t\tjtfOutput1.setText(\"0\");" + NL + "\t\t}" + NL + "\t\telse {" + NL + "\t\t\tc = buttonLabel.charAt(0);" + NL + "\t\t\tinputMgr.addSymbol(c);" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\tprivate void keyStroke(char k) {" + NL + "System.out.print(k);" + NL + "\t\tif (k == DEL_CHAR) {" + NL + "\t\t\tinputMgr.clear();" + NL + "\t\t}" + NL + "\t\telse if (k == ENTER_CHAR) {" + NL + "\t\t\tinputMgr.addSymbol(EQUAL_CHAR);" + NL + "\t\t}" + NL + "\t\telse {" + NL + "\t\t\tinputMgr.addSymbol(k);" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t@Override" + NL + "\tpublic void notifyObserver(String output) {" + NL + "\t\tif (output.equals(Model.RESULT)) {" + NL + "\t\t\t";
  protected final String TEXT_9 = NL + "\t\t\t\tjtfOutput1.setText(model.getResult());" + NL + "\t\t\t";
  protected final String TEXT_10 = NL + "\t\t\t";
  protected final String TEXT_11 = NL + "\t\t\t\tjtfOutput2.setText(model.getResult());" + NL + "\t\t\t";
  protected final String TEXT_12 = NL + "\t\t\t" + NL + "\t\t}" + NL + "\t\telse if (output.equals(Model.STATEMENT)){" + NL + "\t\t\tjtfOutput1.setText(model.getStatement());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t} " + NL + "\t" + NL + "    public static void main(String[] args) {" + NL + "    \t" + NL + "    \t// 1.- Sets ative look & feel of the OS" + NL + "\t\ttry {" + NL + "\t\t    UIManager.setLookAndFeel(" + NL + "\t\t        UIManager.getSystemLookAndFeelClassName());" + NL + "\t\t} catch (UnsupportedLookAndFeelException ex) {" + NL + "\t\t  System.out.println(\"Unable to load native look and feel\");" + NL + "\t\t} catch (ClassNotFoundException e) {" + NL + "\t\t\t// TODO Auto-generated catch block" + NL + "\t\t\te.printStackTrace();" + NL + "\t\t} catch (InstantiationException e) {" + NL + "\t\t\t// TODO Auto-generated catch block" + NL + "\t\t\te.printStackTrace();" + NL + "\t\t} catch (IllegalAccessException e) {" + NL + "\t\t\t// TODO Auto-generated catch block" + NL + "\t\t\te.printStackTrace();" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t// 2.- Instances the calculator" + NL + "    \tCalculator jfDummyCalculator = new Calculator();" + NL + "    }" + NL + "" + NL + "" + NL + "}";

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
     CalculatorModel model = (CalculatorModel) argument; 
    stringBuffer.append(TEXT_1);
    switch(model.getType()){
			case CHILD:
    stringBuffer.append(TEXT_2);
    break; 
		case ADULT:
    stringBuffer.append(TEXT_3);
    break;
		}
    stringBuffer.append(TEXT_4);
     if(model.getOutput().equals(Output.TWO_ROW)){
    stringBuffer.append(TEXT_5);
    }
    stringBuffer.append(TEXT_6);
     if(model.getInput().contains(Input.KEYBOARD)){
    stringBuffer.append(TEXT_7);
    }
    stringBuffer.append(TEXT_8);
     if(model.getOutput().equals(Output.ONE_ROW)){
    stringBuffer.append(TEXT_9);
    }
    stringBuffer.append(TEXT_10);
     if(model.getOutput().equals(Output.TWO_ROW)){
    stringBuffer.append(TEXT_11);
    }
    stringBuffer.append(TEXT_12);
    return stringBuffer.toString();
  }
}
